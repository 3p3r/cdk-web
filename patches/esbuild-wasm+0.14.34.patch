diff --git a/node_modules/esbuild-wasm/wasm_exec.js b/node_modules/esbuild-wasm/wasm_exec.js
index 9ce6a20..ca0e77c 100644
--- a/node_modules/esbuild-wasm/wasm_exec.js
+++ b/node_modules/esbuild-wasm/wasm_exec.js
@@ -4,16 +4,16 @@
 
 "use strict";
 
-(() => {
+module.exports = function({fs, process, crypto, performance, TextEncoder, TextDecoder}) {
 	const enosys = () => {
 		const err = new Error("not implemented");
 		err.code = "ENOSYS";
 		return err;
 	};
 
-	if (!globalThis.fs) {
+	if (!fs) {
 		let outputBuf = "";
-		globalThis.fs = {
+		fs = {
 			constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 }, // unused
 			writeSync(fd, buf) {
 				outputBuf += decoder.decode(buf);
@@ -58,8 +58,8 @@
 		};
 	}
 
-	if (!globalThis.process) {
-		globalThis.process = {
+	if (!process) {
+		process = {
 			getuid() { return -1; },
 			getgid() { return -1; },
 			geteuid() { return -1; },
@@ -73,26 +73,26 @@
 		}
 	}
 
-	if (!globalThis.crypto) {
+	if (!crypto) {
 		throw new Error("globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)");
 	}
 
-	if (!globalThis.performance) {
+	if (!performance) {
 		throw new Error("globalThis.performance is not available, polyfill required (performance.now only)");
 	}
 
-	if (!globalThis.TextEncoder) {
+	if (!TextEncoder) {
 		throw new Error("globalThis.TextEncoder is not available, polyfill required");
 	}
 
-	if (!globalThis.TextDecoder) {
+	if (!TextDecoder) {
 		throw new Error("globalThis.TextDecoder is not available, polyfill required");
 	}
 
 	const encoder = new TextEncoder("utf-8");
 	const decoder = new TextDecoder("utf-8");
 
-	globalThis.Go = class {
+	class Go {
 		constructor() {
 			this.argv = ["js"];
 			this.env = {};
@@ -231,7 +231,10 @@
 						const fd = getInt64(sp + 8);
 						const p = getInt64(sp + 16);
 						const n = this.mem.getInt32(sp + 24, true);
-						fs.writeSync(fd, new Uint8Array(this._inst.exports.mem.buffer, p, n));
+						const c = new Uint8Array(this._inst.exports.mem.buffer, p, n);
+						if (fd == 1) return process.stdout.write(c)
+						if (fd == 2) return process.stderr.write(c)
+						fs.writeSync(fd, c);
 					},
 
 					// func resetMemoryDataView()
@@ -459,6 +462,26 @@
 			if (!(instance instanceof WebAssembly.Instance)) {
 				throw new Error("Go.run: WebAssembly.Instance expected");
 			}
+			const globals = new Proxy(globalThis, {
+				get(target, prop, receiver) {
+					switch (prop) {
+						case 'fs':
+							return fs;
+						case 'performance':
+							return performance;
+						case 'crypto':
+							return crypto;
+						case 'process':
+							return process;
+						case 'TextEncoder':
+							return TextEncoder;
+						case 'TextDecoder':
+							return TextDecoder;
+						default:
+							return Reflect.get(target, prop, receiver)
+					}
+				}
+			})
 			this._inst = instance;
 			this.mem = new DataView(this._inst.exports.mem.buffer);
 			this._values = [ // JS values that Go currently has references to, indexed by reference id
@@ -467,7 +490,7 @@
 				null,
 				true,
 				false,
-				globalThis,
+				globals,
 				this,
 			];
 			this._goRefCounts = new Array(this._values.length).fill(Infinity); // number of references that Go has to a JS value, indexed by reference id
@@ -476,7 +499,7 @@
 				[null, 2],
 				[true, 3],
 				[false, 4],
-				[globalThis, 5],
+				[globals, 5],
 				[this, 6],
 			]);
 			this._idPool = [];   // unused ids that have been garbage collected
@@ -551,4 +574,5 @@
 			};
 		}
 	}
-})();
+	return Go;
+};
